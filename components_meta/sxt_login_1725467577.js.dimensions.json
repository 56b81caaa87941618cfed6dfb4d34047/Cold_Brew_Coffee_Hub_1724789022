{
    "id": "sxt_login_1725467577",
    "name": "sxt-login",
    "type": "containerComponent",
    "metadata": {
        "markdownText": "<template>\n  <div class=\"flex items-center justify-center w-full h-full bg-gradient-to-br from-purple-900 via-pink-800 to-black\">\n    <div class=\"p-8 bg-white bg-opacity-20 backdrop-filter backdrop-blur-lg rounded-lg shadow-lg\">\n      <div v-if=\"!isLoggedIn\">\n        <button class=\"bg-pink-500 hover:bg-pink-600 text-white font-bold py-3 px-6 rounded-full transition duration-300 ease-in-out transform hover:scale-105 shadow-md\"\n          @click=\"openModal\">Login</button>\n      </div>\n      <div v-else>\n        <button class=\"bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-6 rounded-full transition duration-300 ease-in-out transform hover:scale-105 shadow-md\"\n          @click=\"handleLogout\">Logout\n        </button>\n        <div class=\"mt-4 text-white font-semibold\">{{ getUserInformation().userId }}</div>\n      </div>\n    </div>\n    <dialog ref=\"loginModal\" class=\"bg-transparent\">\n      <div class=\"w-full max-w-md p-8 bg-white bg-opacity-20 backdrop-filter backdrop-blur-lg rounded-lg shadow-lg\">\n        <h2 class=\"text-3xl font-semibold text-center text-white mb-8\">Login</h2>\n        <form @submit.prevent=\"handleLogin\">\n          <div class=\"mb-6\">\n            <label for=\"text\" class=\"block text-sm font-medium text-pink-200 mb-2\">Username:</label>\n            <input type=\"text\" id=\"email\" v-model=\"username\" required\n              class=\"w-full px-4 py-3 text-white bg-purple-800 bg-opacity-50 border border-pink-300 rounded-md focus:border-pink-500 focus:outline-none focus:ring focus:ring-pink-200 focus:ring-opacity-50 placeholder-pink-200::placeholder\">\n          </div>\n          <div class=\"mb-8\">\n            <label for=\"password\" class=\"block text-sm font-medium text-pink-200 mb-2\">Password:</label>\n            <input type=\"password\" id=\"password\" v-model=\"password\" required\n              class=\"w-full px-4 py-3 text-white bg-purple-800 bg-opacity-50 border border-pink-300 rounded-md focus:border-pink-500 focus:outline-none focus:ring focus:ring-pink-200 focus:ring-opacity-50 placeholder-pink-200::placeholder\">\n          </div>\n          <div class=\"flex items-center justify-between space-x-4\">\n            <button @click=\"closeModal\"\n              class=\"w-full px-6 py-3 text-white bg-pink-600 rounded-full hover:bg-pink-700 focus:outline-none focus:ring-2 focus:ring-pink-500 focus:ring-opacity-50 transition duration-300 ease-in-out transform hover:scale-105 shadow-md\">\n              Cancel\n            </button>\n            <button type=\"submit\"\n              class=\"w-full px-6 py-3 text-white bg-purple-600 rounded-full hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-opacity-50 transition duration-300 ease-in-out transform hover:scale-105 shadow-md\">\n              Login\n            </button>\n          </div>\n        </form>\n      </div>\n    </dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Login',\n  data() {\n    return {\n      username: '',\n      password: '',\n      isLoggedIn: false,\n      isLoading: false,\n      showLogin: false\n    };\n  },\n  beforeMount: function () {\n    // check to see if we have user credentials in localStorage\n    const credentials = localStorage.getItem('userInformation');\n    if (credentials) {\n      this.isLoggedIn = true;\n    }\n  },\n  methods: {\n    async handleLogin() {\n      try {\n        console.log('Username:', this.username);\n        console.log('Password:', this.password);\n\n        await this.loginUser({\n          'userId': this.username,\n          'password': this.password\n        });\n        this.isLoggedIn = true;\n        this.closeModal();\n      } catch (error) {\n        console.log(error)\n      } finally {\n        this.isLoading = false;\n        this.username = '';\n        this.password = '';\n      }\n    },\n    handleLogout() {\n      try {\n        this.logoutUser();\n        this.showLogin = false;\n        this.isLoggedIn = false;\n      } catch (error) {\n\n      } finally {\n\n      }\n    },\n    getUserInformation() {\n      return JSON.parse(localStorage.getItem('userInformation'));\n    },\n    openModal() {\n      this.$refs.loginModal.showModal();\n    },\n    closeModal() {\n      this.$refs.loginModal.close();\n    },\n    async loginUser(credentials) {\n      const tempHardcodedLoginPath = `https://proxy.stage.cosmicmoment.dev/auth/login`\n      let response = await fetch(tempHardcodedLoginPath, {\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\",\n      body: JSON.stringify(credentials)\n      })\n      if (!response.ok) {\n      throw new Error(\"failed to login user\")\n      }\n      let responseData = await response.json();\n      console.log(responseData);\n\n      // add info to localStorage\n      const userInformation = {\n      userId: credentials.userId,\n      ...responseData\n      }\n\n      localStorage.setItem('userInformation', JSON.stringify(userInformation));\n    },\n    async logoutUser() {\n      localStorage.removeItem(\"userInformation\");\n    }\n  },\n};\n</script>"
    },
    "w": 12,
    "h": 4,
    "x": 0,
    "y": 12,
    "i": "2",
    "minW": 3,
    "maxW": 12,
    "minH": 1,
    "moved": false,
    "static": false,
    "isDraggable": true,
    "isResizable": true
}